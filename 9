#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void createPlayfairMatrix(char *key, char matrix[SIZE][SIZE]);
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col);
void decryptPlayfair(char *ciphertext, char *plaintext, char matrix[SIZE][SIZE]);
int main() {
    char key[] = "PLAYFAIR"; 
    char matrix[SIZE][SIZE];  
    char ciphertext[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    char plaintext[200];  
    createPlayfairMatrix(key, matrix);
    decryptPlayfair(ciphertext, plaintext, matrix);
    printf("Decrypted plaintext: %s\n", plaintext);
    return 0;
}
void createPlayfairMatrix(char *key, char matrix[SIZE][SIZE]) {
    int i, j, k = 0;
    int used[26] = {0}; 
    for (i = 0; i < strlen(key); i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';  
        if (!used[ch - 'A']) {
            matrix[k / SIZE][k % SIZE] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
    for (i = 0; i < 26; i++) {
        char ch = 'A' + i;
        if (ch == 'J') continue; // Skip 'J' as per Playfair rules
        if (!used[ch - 'A']) {
            matrix[k / SIZE][k % SIZE] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
}

void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void decryptPlayfair(char *ciphertext, char *plaintext, char matrix[SIZE][SIZE]) {
    int i, row1, col1, row2, col2;
    int len = strlen(ciphertext);

    for (i = 0; i < len; i += 2) {
        char first = toupper(ciphertext[i]);
        char second = toupper(ciphertext[i + 1]);

        if (first == 'J') first = 'I';
        if (second == 'J') second = 'I';

        findPosition(matrix, first, &row1, &col1);
        findPosition(matrix, second, &row2, &col2);

        // Apply Playfair decryption rules
        if (row1 == row2) {
            // Same row: move left
            plaintext[i] = matrix[row1][(col1 + SIZE - 1) % SIZE];
            plaintext[i + 1] = matrix[row2][(col2 + SIZE - 1) % SIZE];
        } else if (col1 == col2) {
            // Same column: move up
            plaintext[i] = matrix[(row1 + SIZE - 1) % SIZE][col1];
            plaintext[i + 1] = matrix[(row2 + SIZE - 1) % SIZE][col2];
        } else {
            // Rectangle swap
            plaintext[i] = matrix[row1][col2];
            plaintext[i + 1] = matrix[row2][col1];
        }
    }
    plaintext[len] = '\0'; // Null-terminate the plaintext
}
