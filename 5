#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to calculate the gcd of two numbers
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to check if a value 'a' is valid for the affine cipher
int isValidA(int a) {
    return gcd(a, 26) == 1;
}

// Function to encrypt a plaintext using the affine cipher
void affineEncrypt(char text[], int a, int b, char cipherText[]) {
    int i;
    for (i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char ch = toupper(text[i]);
            // Apply the affine cipher formula: C = (a * p + b) % 26
            cipherText[i] = (a * (ch - 'A') + b) % 26 + 'A';
        } else {
            cipherText[i] = text[i]; // Non-alphabetic characters remain unchanged
        }
    }
    cipherText[i] = '\0'; // Null-terminate the ciphertext string
}

int main() {
    char text[100], cipherText[100];
    int a, b;

    // Input plaintext and keys
    printf("Enter plaintext: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0'; // Remove newline from the input

    printf("Enter key 'a' (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter key 'b': ");
    scanf("%d", &b);

    // Check if 'a' is valid (must be coprime with 26)
    if (!isValidA(a)) {
        printf("Invalid value for 'a'. It must be coprime with 26.\n");
        return 1;
    }

    // Encrypt the text
    affineEncrypt(text, a, b, cipherText);

    // Output the encrypted text
    printf("Encrypted text: %s\n", cipherText);

    return 0;
}
