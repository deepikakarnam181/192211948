#include <stdio.h>
#include <string.h>
#define MAX_LENGTH 1000
void substituteDecrypt(char* cipherText, char* key, char* plainText) {
    int i; 
    for (i = 0; cipherText[i] != '\0'; i++) {
        if (cipherText[i] >= 'A' && cipherText[i] <= 'Z') {
            plainText[i] = key[cipherText[i] - 'A'];
        } else if (cipherText[i] >= 'a' && cipherText[i] <= 'z') {
            plainText[i] = key[cipherText[i] - 'a' + 26];
        } else {
            plainText[i] = cipherText[i];
        }
    }
    plainText[i] = '\0';  
}
void frequencyAnalysis(char* cipherText, char* key) {
    int i;
    int freq[256] = {0};
    for (i = 0; cipherText[i] != '\0'; i++) {
        freq[(int)cipherText[i]]++;
    }

    // Sort the characters by frequency (descending)
    char sortedChars[256];
    int sortedFreq[256];
    int n = 0;

    for (i = 0; i < 256; i++) {
        if (freq[i] > 0) {
            sortedChars[n] = (char)i;
            sortedFreq[n] = freq[i];
            n++;
        }
    }
    
    // Simple frequency analysis mapping (we'll assume the first 3 most frequent characters are 'e', 't', 'h')
    // In real cases, this should be refined with more analysis and guesses.
    key[sortedChars[0] - '0'] = 'e'; // Most frequent character -> 'e'
    key[sortedChars[1] - '0'] = 't'; // Second most frequent character -> 't'
    key[sortedChars[2] - '0'] = 'h'; // Third most frequent character -> 'h'
}

int main() {
    char cipherText[MAX_LENGTH] = "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*;4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81 (‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?;";

    char key[256] = {0}; // Key array to map ciphertext to plaintext characters

    // Perform frequency analysis on the ciphertext
    frequencyAnalysis(cipherText, key);

    // Decrypt the ciphertext using the substitution key
    char plainText[MAX_LENGTH];
    substituteDecrypt(cipherText, key, plainText);

    printf("Decrypted Text: \n%s\n", plainText);

    return 0;
}
