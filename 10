#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define MATRIX_SIZE 5
char keyMatrix[MATRIX_SIZE][MATRIX_SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};
void locate(char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < MATRIX_SIZE; i++) {
        for (j = 0; j < MATRIX_SIZE; j++) {
            if (keyMatrix[i][j] == ch || (ch == 'J' && keyMatrix[i][j] == 'I')) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void preprocessText(char *text) {
    int i, j = 0;
    for (i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            text[j++] = toupper(text[i] == 'J' ? 'I' : text[i]);
        }
    }
    text[j] = '\0';
}

// Function to prepare digraphs for Playfair cipher encryption
void prepareDigraphs(char *text, char digraphs[][2], int *size) {
    int i, j = 0;
    preprocessText(text);
    for (i = 0; text[i] != '\0'; i += 2) {
        digraphs[j][0] = text[i];
        if (text[i + 1] == '\0' || text[i] == text[i + 1]) {
            digraphs[j][1] = 'X'; // Insert 'X' if there's a duplicate or single letter
            i--;
        } else {
            digraphs[j][1] = text[i + 1];
        }
        j++;
    }
    *size = j;
}

// Function to encrypt digraphs using Playfair cipher rules
void encryptDigraphs(char digraphs[][2], int size) {
    int row1, col1, row2, col2;
    int i;
    for (i = 0; i < size; i++) {
        locate(digraphs[i][0], &row1, &col1);
        locate(digraphs[i][1], &row2, &col2);

        if (row1 == row2) {
            // Same row
            digraphs[i][0] = keyMatrix[row1][(col1 + 1) % MATRIX_SIZE];
            digraphs[i][1] = keyMatrix[row2][(col2 + 1) % MATRIX_SIZE];
        } else if (col1 == col2) {
            // Same column
            digraphs[i][0] = keyMatrix[(row1 + 1) % MATRIX_SIZE][col1];
            digraphs[i][1] = keyMatrix[(row2 + 1) % MATRIX_SIZE][col2];
        } else {
            // Rectangle swap
            digraphs[i][0] = keyMatrix[row1][col2];
            digraphs[i][1] = keyMatrix[row2][col1];
        }
    }
}

// Function to print encrypted message
void printEncryptedMessage(char digraphs[][2], int size) {
    int i;
    printf("Encrypted Message: ");
    for (i = 0; i < size; i++) 
        printf("%c%c ", digraphs[i][0], digraphs[i][1]);
    }
    printf("\n");
}

int main() {
    char text[] = "Must see you over Cadogan West. Coming at once";
    char digraphs[50][2]; // Array to store digraphs
    int size;

    // Prepare digraphs for encryption
    prepareDigraphs(text, digraphs, &size);

    // Encrypt digraphs
    encryptDigraphs(digraphs, size);

    // Print encrypted message
    printEncryptedMessage(digraphs, size);

    return 0;
}
